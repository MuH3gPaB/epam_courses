package my.epam.stationery;

import org.junit.Assert;
import org.junit.Test;

import java.awt.*;

/**
 * Created by Muxa on 24.02.2017.
 */
public class PenTest extends Assert {

    @Test
    public void createNewPenWith2ValidArgsConstructorShouldOK() {
        try {
            new Pen(Color.black, Color.green);
        } catch (Exception e) {
            fail();
        }
    }

    @Test
    public void createNewPenWith2NullArgsConstructorShouldThrowIAException() {
        try {
            new Pen(null, null);
        } catch (Exception e) {
            assertEquals(IllegalArgumentException.class, e.getClass());
            return;
        }
        fail();
    }

    @Test
    public void createNewPenWith5ValidArgsConstructorShouldOK() {
        try {
            new Pen(Color.black, Color.green, "BIC", Pen.BALLPOINT_PEN_TYPE, "RollerBall");
        } catch (Exception e) {
            fail();
        }
    }

    @Test
    public void createNewPenWith5NullArgsConstructorShouldThrowIAException() {
        try {
            new Pen(null, null, null, null, null);
        } catch (Exception e) {
            assertEquals(IllegalArgumentException.class, e.getClass());
            return;
        }
        fail();
    }

    @Test
    public void createNewPenWith2NullAnd3ValidArgsConstructorShouldThrowIAException() {
        try {
            new Pen(null, null, "BIC", Pen.BALLPOINT_PEN_TYPE, "RollerBall");
        } catch (Exception e) {
            assertEquals(IllegalArgumentException.class, e.getClass());
            return;
        }
        fail();
    }

    @Test
    public void createNewPenWith2ValidAnd3NullArgsConstructorShouldCreatePenWithDefaults() {
        try {
            Pen pen = new Pen(Color.black, Color.black, null, null, null);
            assertEquals(Pen.DEFAULT_BRAND_NAME, pen.getBrandName());
            assertEquals(Pen.DEFAULT_TYPE, pen.getType());
            assertEquals(Pen.DEFAULT_LABEL, pen.getLabel());
        } catch (Exception e) {
            fail();
        }
    }

    @Test
    public void equalsReflexive(){
        Pen pen = Pen.DEFAULT_BLACK_PEN;
        assertTrue(pen.equals(pen));
    }

    @Test
    public void equalsSymmetric(){
        Pen penOne = new Pen(Color.black, Color.cyan);
        Pen penTwo = new Pen(Color.black, Color.cyan);
        assertTrue(penOne.equals(penTwo));
        assertTrue(penTwo.equals(penOne));
    }

    @Test
    public void notEqualsNull(){
        Pen penOne = new Pen(Color.black, Color.cyan);
        assertFalse(penOne.equals(null));

    }

    @Test
    public void sameHashCodesWithEqualsPens(){
        Pen penOne = new Pen(Color.black, Color.cyan);
        Pen penTwo = new Pen(Color.black, Color.cyan);
        assertEquals(penOne, penTwo);
        assertEquals(penOne.hashCode(), penTwo.hashCode());
    }
}